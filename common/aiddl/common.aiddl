(#mod self org.aiddl.common)

(#nms EVAL org.aiddl.eval)

(#def Map
  (and
    (has-type #self {list set})
      (forall ?e #self
        (and
          (has-type ?e key-value) ))))
            
(#def MapGen
  (match (?KT ?VT) #self
    (lambda ?M ($MapOf (?KT ?VT ?M)))))

(#def MapOf
  (match (?KeyType ?ValueType ?Map) #self
    (and
      (has-type ?Map {^list ^set})
      (forall ?k:?v ?Map
        (and
          (has-type ?k ?KeyType)
          (has-type ?v ?ValueType)
       )))))

(#def SetGen
  (lambda ?Set
    (and
      (has-type ?Set ^set)
      (forall ?e ?Set (has-type ?e #self)))))

(#def (SetOf ?Type ?Set)
  (and
    (has-type ?Set ^set)
    (forall ?e ?Set (has-type ?e ?Type))))

(#def ListGen
  (lambda ?List
    (and
      (has-type ?List ^list)
      (forall ?e ?List (has-type ?e #self)))))

(#def (ListOf ?Type)
  (and
    (has-type #self ^list)
    (forall ?e #self (has-type ?e ?Type))))


(#def Composite
  (match (?S ?Arg) #self
    (and
      (has-type ?S ^collection)
      (forall ?e ?S (has-type ?Arg ?e))
    )))

(#def KeyValuedType
  (lambda ?x
    (forall ?k:?t #self
      (call ?t (get-key ?k ?x))) ))

(#def TypedTuple
  (lambda ?x
    (forall ?i (domain {min:0 inc:1 max:(- (size #self) 1)})
      (has-type (get-idx ?i ?x) (get-idx ?i #self))
)))


(#def MapFunctionGen
  (lambda ?k
    (get-key ?k #self default:NIL)))
      