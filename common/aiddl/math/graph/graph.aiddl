(#mod self org.aiddl.common.math.graph)

(#req EVAL org.aiddl.eval.namespace)
(#nms E basic@EVAL)

(#req C org.aiddl.common)

(#type Node term)

(#type UndirectedEdge (type.set ^$Node constraint:(lambda ?X (= 2 (size ?X)))))
(#type DirectedEdge (type.sig [^$Node ^$Node]))
(#type Edge (type.union [^$UndirectedEdge ^$DirectedEdge]))

(#type (TypedGraph ?NodeType)
       (type.kv-tuple [V:(type.set ?NodeType) E:(type.set ^$Edge)]
        constraint:(lambda ?X 
          (let [?V:(get-key V ?X) ?E:(get-key E ?X)]
              (forall ?e ?E (contains-all ?V ?e) )))))

(#type (TypedDiGraph ?NodeType)
       (type.kv-tuple [V:(type.set ?NodeType) E:(type.set ^$DirectedEdge)]
        constraint:(lambda ?X 
          (let [?V:(get-key V ?X) ?E:(get-key E ?X)]
              (forall (?u ?v) ?E (and (contains ?V ?u) (contains ?V ?v)))))))

(#type Graph ($TypedGraph ^$Node))
(#type DiGraph ($TypedDiGraph ^$Node))

(#type Path (type.list ^$Node))
(#type WeightMap (type.col (type.kvp ^$Edge:^numerical)))
(#type DistanceMap (type.union {(type.enum {NIL}) (type.col (type.kvp ^$Node:^numerical))}))
(#type PredecessorMap (type.union {(type.enum {NIL}) (type.col (type.kvp ^$Node:^$Node))}))

(#type sssp-out (type.kv-tuple [distance:^$DistanceMap predecessor:^$PredecessorMap]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Interfaces
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(#interface single-source-shortest-path (
  uri    :  org.aiddl.common.math.graph.single-source-shortest-path
  input  : (TypedTuple@C [^$DiGraph {^fun-ref ^$WeightMap} ^$Node])
  output : ^$sssp-out   ;;(KeyValuedType@C [distance:^$DistanceMap predecessor:^$PredecessorMap])
))

(#interface depth-first-search (
  uri    : org.aiddl.common.math.graph.depth-first-search
  input  : ^$DiGraph
  output : (KeyValuedType@C [
    pi:(MapGen@C ^$Node ^$Node)
    distances:(MapGen@C ^$Node ^numerical)
    finish-times:(MapGen@C ^$Node ^numerical)
    components:(SetGen@C (SetGen@C ^$Node)) ]
  )
))

(#interface strongly-connected-components (
  uri    : org.aiddl.common.math.graph.scc-computer
  input  : ^$DiGraph
  output : (SetGen@C (SetGen@C ^$Node)) 
))

(#interface transpose (
  uri    : org.aiddl.common.math.graph.transpose
  input  : ^$DiGraph
  output : ^$DiGraph
))

(#interface path-extractor (
  uri    : org.aiddl.common.math.graph.path-extractor
  input  : ^$PredecessorMap
  output : ^$Path
))
  

	