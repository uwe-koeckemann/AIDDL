(#mod self org.aiddl.common.optimization.combinatorial.tsp.tree-search)

(#nms E org.aiddl.eval-ht)
(#req R org.aiddl.request)

(#req C org.aiddl.common)

(#req TSP org.aiddl.common.optimization.combinatorial.tsp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Services
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(Request@R (configure-functions ?M) [
  (call #load-fun
    ( name    : random-gen
      module  : ?M
      class   : org.aiddl.common.optimization.combinatorial.tsp.TspGenerator ) random-gen )
  (call #load-fun
    ( name    : expand
      module  : ?M
      class   : org.aiddl.common.optimization.combinatorial.tsp.TspExpandPath ) expand )
  (call #load-fun    
    ( name    : cost-function
      module  : ?M  
      class   : org.aiddl.common.optimization.combinatorial.tsp.TspExpandPath ) cost )
  (call #load-fun    
    ( name    : remainder-function
      module  : ?M  
      class   : org.aiddl.common.optimization.combinatorial.tsp.TspMinRemainder ) best-remainder )      
  (call #load-fun    
    ( name    : search
      module  : ?M  
      class   : org.aiddl.common.search.TreeSearch
      config  : [ verbose:0 logger-name:Search ] ) search)
  ])

(#def VarDomains (#type #self (SetGen@C ^VariableDomain@CS)))

(Request@R init [
    (create (^#boolean sat false))
    (create (^#list exp []))
    (create (^$VarDomains D' {}))
    (create (^#integer a_count 0))
    (create (^#term path []))
    (create (^#numerical best +INF))
    (create (^#list arg-best []))
  ])


(#def path-cost
  (#reduce (#lambda (?c ?x) (#add ?c (#first ?x))) #self initial-value:0))

(Request@R (solver ?TSP ?M)
  [
    ;; (print "TSP" Start)
    (init best-remainder@?M ?TSP)
    (init expand@?M ?TSP)
    (while (#not-equal path@?M NIL)
      [
        (call expand@?M path@?M exp)
        (call search@?M (expand exp@?M) path)
        (write (#add 1 a_count@?M) a_count)
        (write ($path-cost path@?M) path-cost)
        (write (#add path-cost@?M (best-remainder@?M path@?M)) path-cost)
        (while (#and (#not-equals path@?M NIL) (#gte path-cost@?M best@?M))
          [
            (call search@?M (next) path)
            (if (#not-equals path@?M NIL)
              [
                (write ($path-cost path@?M) path-cost)
                (write (#add path-cost@?M (best-remainder@?M path@?M)) path-cost)
              ])
            ;; (print "Path" a@?M)
            (write (#add 1 a_count@?M) a_count)
          ]
        ) 
        (if (#and
              (#not (#equals path@?M NIL))
              (#equals (#size path@?M) (#size (#get-key V ?TSP)))
              (#lt path-cost@?M best@?M)
             )
          [
            (write path-cost@?M best)
            (write path@?M arg-best)
            ;; (print "New Best" (path-cost@?M arg-best@?M))
          ]
        )
      ]
    )
    ;; (print "Solution" arg-best@?M)
    ;; (print "Tested Assignments" a_count@?M)
  ]
)

(Request@R (main ?TSP ?M)
  [
    $(configure-functions ?M)
    $init
    $(solver ?TSP ?M)
  ])
  