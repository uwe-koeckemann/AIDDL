(#mod self org.aiddl.common.planning.task-network)

(#req EVAL   org.aiddl.eval.namespace)
(#nms nms-type     type-ops@EVAL)
(#nms nms-sym      sym-ops@EVAL)

(#req G   org.aiddl.common.math.graph)
(#req FOL org.aiddl.common.reasoning.logic.first-order)
(#req SVP org.aiddl.common.planning.state-variable)
(#req P   org.aiddl.common.planning.state-variable.plan)

(#type Task ^Atom@FOL)

(#type TotallyOrderedTaskNetwork (list-of ^$Task))

(#type DigraphTaskNetwork (TypedDiGraph@G $Task))

(#type TaskNetwork
  (union [
    $TotallyOrderedTaskNetwork
    $DigraphTaskNetwork ]))

(#type SimpleTaskNetworkMethod
  (dict [
    name:^Atom@FOL
    task:^Atom@FOL
    preconditions:^StateVariableAssignments@SVP
    sub-tasks:^Atom@FOL        
]))

(#type TotallyOrderedSimpleTaskNetworkMethod
  (dict [
    name:^Atom@FOL
    task:^Atom@FOL
    preconditions:^StateVariableAssignments@SVP
    sub-tasks:^$TotallyOrderedTaskNetwork
]))

(#type TotalOrderStnProblem
  (dict [
    initial-state:^StateVariableAssignments@SVP
    open-tasks:^$TotallyOrderedTaskNetwork
    operators:^Operators@SVP
    methods:(set-of ^$TotallyOrderedSimpleTaskNetworkMethod)
    ]))

(#type HtnMethod NIL)

(#type Constraints NIL)


(#interface
  total-order-stn-planner
  (
    uri:(sym-concat $self total-order-stn-planner)
    input:^$TotalOrderStnProblem
    output:^Plan@P
  ))