(#mod self org.aiddl.common.reasoning.probabilistic.bayesian-network)

(#req EVAL org.aiddl.eval.namespace)
(#nms E basic@EVAL)

(#req P org.aiddl.common.reasoning.probabilistic.probability)

(#type Dependencies (set-of (typed-kvp ^tuple:^RandomVariable@P)))

(#type Values (col-of ^term))
    
(#type WeightVector (list-of ^numerical))
  
(#type CPTEntry (typed-kvp $Values:$WeightVector))
    
(#type CPTEntries (list-of ^$CPTEntry
                   constraint:(lambda ?X (and
                                (= (size (key ?e)) (size (key (first ?X))))
                                (= (size (value ?e)) (size (value (first ?X))))))))

(#type ConditionalProbabilityTable
  (sig [^symbolic ^$Values ^$Values ^$CPTEntries]
       constraint:(lambda ?X
                    (match (?Target ?ConditionVars ?TargetValues ?Entries) ?X
                      (forall ?e ?Entries
                        (and
                          (= (size ?ConditionVars) (size (key ?e)))
                          (= (size ?TargetValues)  (size (value ?e)))))))))

(#type Evidence (set-of ^key-value))

(#type BayesianNetwork (set-of ^$ConditionalProbabilityTable‚Åæ)

(#type BayesianNetworkQuery
  (dict [
    variable:^symbolic
    evidence:^$Evidence
    bn:^$BayesianNetwork ]))

(#type BayesianNetworkAnswer (list-of (typed-kvp ^symbolic:^Probability@P)))

(#interface mcmc-sampler (
 uri : org.aiddl.probabilistic-reasoning.bayesian-network.mcmc
 input : (variable:symbolic evidence:$Evidence bn:$BayesianNetwork)
 output : $BayesianNetworkAnswer
))
