(#mod self org.aiddl.common.reasoning.probabilistic.bayesian-network)

(#nms EVAL org.aiddl.eval)

(#req P org.aiddl.common.reasoning.probabilistic.probability)

(#def
  Dependencies
  (and
    (has-type #self set)
    (forall ?k : ?v #self
      (and
        (has-type ?k tuple)
        (has-type ?v RandomVariable@P)))))

(#def
  Values
  (and
    (has-type #self {list set})
    (forall ?e #self
      (has-type ?e term))))
    
(#def
  WeightVector
  (and
    (has-type #self list)
    (forall ?e #self (has-type ?e numerical))
  ))
  
(#def
  CPTEntry
  (and
    (has-type #self key-value)
    (match ?k : ?v, #self
      (and
        (has-type ?k $Values)
        (has-type ?v $WeightVector)))))
    
(#def
  CPTEntries
  (and
    (has-type #self list)
    (forall ?e #self
      (and
        (has-type ?e $CPTEntry)
        (= (size (key ?e)) (size (key (first #self))))
        (= (size (value ?e)) (size (value (first #self))))
        ))))

(#def
  ConditionalProbabilityTable
  (and
    (has-type #self tuple)
    (signature #self [symbolic $Values $Values $CPTEntries])
    (= (size #self) 4)
    (match (?Target ?ConditionVars ?TargetValues ?Entries) #self
      (forall ?e ?Entries
        (and
          (= (size ?ConditionVars) (size (key ?e)))
          (= (size ?TargetValues)  (size (value ?e)))
        )
      )
    ) 
  )
)

(#def Evidence
  (and
    (has-type #self set)
    (forall ?e #self (has-type ?e key-value))))

(#def
  BayesianNetwork
  (and
    (has-type #self set)
    (forall ?e #self
      (has-type ?e $ConditionalProbabilityTable)
    )))


(#def
  BayesianNetworkQuery
  (and
    (has-type #self #tuple)
    (match (variable : ?X, evidence : ?E, bn : ?BN) #self
      (and
        (has-type ?X symbolic)
        (has-type ?E $Evidence)
        (has-type ?BN $BayesianNetwork) ))))

(#def BayesianNetworkAnswer
  (and
    (has-type #self #list)
    (forall ?e #self
      (and
        (has-type ?e key-value)
        (match ?k : ?v, ?e
          (and
            (has-type ?k symbolic)
            (has-type ?v Probability@P)
    ))))))

(#fun mcmc-sampler (
 uri : org.aiddl.probabilistic-reasoning.bayesian-network.mcmc
 input : (variable:symbolic evidence:$Evidence bn:$BayesianNetwork)
 output : $BayesianNetworkAnswer
))
