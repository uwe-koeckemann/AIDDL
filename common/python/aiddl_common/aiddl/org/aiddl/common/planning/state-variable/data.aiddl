(#mod self org.aiddl.common.planning.state-variable.data)

(#req EVAL org.aiddl.eval.namespace)
(#nms nms-type type-ops@EVAL)
(#nms nms-basic basic-ops@EVAL)
(#nms nms-logic logic-ops@EVAL)
(#nms nms-num numerical-ops@EVAL)
(#nms nms-sym sym-ops@EVAL)
(#nms nms-col collection-ops@EVAL)

(#req G  org.aiddl.common.math.graph)
(#req P  org.aiddl.common.planning.state-variable)
(#req FL org.aiddl.common.reasoning.logic.first-order)


(#type CausalGraph (TypedDiGraph@G ^AtomOrSymbol@P))

(#type DomainTransitionGraph
  (inter
    (TypedDiGraph@G ^AtomOrSymbol@P)
    (dict [labels:(set-of (typed-kvp ^AtomOrSymbol@P:(set-of ^StateVariableAssignments@P)))])
  ))

(#type DomainTransitionGraphs (set-of ^$DomainTransitionGraph))

(#type RelaxedPlanningGraph
  (union [^list]
    constraint:
    (lambda ?RPG
      (let
        [?O:(reduce (lambda (?c ?x) (col-union {(get-idx ?x ?RPG) ?c}))
           (filter (lambda ?x (= (modulo ?x 2) 1)) (domain {min:0 max:(- (size ?RPG) 1)}))
           initial-value:{})
         ?P:(reduce (lambda (?c ?x) (col-union {(get-idx ?x ?RPG) ?c}))
           (filter (lambda ?x (= (modulo ?x 2) 0)) (domain {min:0 max:(- (size ?RPG) 1)}))
           initial-value:{})]
        (and
          (forall ?e ?P
            (has-type ?e ^StateVariableAssignment@P))
          (forall ?e ?O
            (has-type ?e ^Operator@P) ))))))


(#interface causal-graph-creator (
  uri    : (sym-concat $self causal-graph-creator)
  input  : ^Operators@P
  output : ^$CausalGraph) )

(#interface domain-transition-graph-creator (
  uri    : (sym-concat $self domain-transition-graph-creator)
  input  : ^Operators@P
  output : ^$DomainTransitionGraphs ))

(#interface relaxed-planning-graph-creator (
  uri    : (sym-concat $self rpg-creator)
  input  : ^Problem@P
  output : ^$RelaxedPlanningGraph
))
