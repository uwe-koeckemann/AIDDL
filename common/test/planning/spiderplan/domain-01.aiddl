(#mod self org.aiddl.common.test.planning.spiderplan.domain-01)

(#req EVAL org.aiddl.eval.namespace)
(#nms E hashtag@EVAL)

;; (#req CBP org.aiddl.common.planning.constraint-based)
;; (#req AIC org.aiddl.common.reasoning.temporal.allen-interval)
;; (#req RR org.aiddl.common.reasoning.resource)
;; (#req TP org.aiddl.common.planning.temporal)
;; (#req D org.aiddl.common.domain)

(#term D_robot { r1 })
(#term D_location { l1 l2 })
(#term D_object { o1 })

(#term problem
  {
    Operator:$operators
    domains:{
      t_bool:{true false}      
      t_robot:$D_robot
      t_location:$D_location
      t_loc_or_rob:{$D_robot $D_location}      
      t_object:$D_object
    }
    signatures:{
      (at t_robot):t_location
      (object-at t_object):t_location
      (adjacent t_location t_location):t_bool
    }     
    statement:{
      (s0_1 (at r1):loc1)
      (s0_2 (object-at o1):loc2)
      (s0_3 (adjacent loc1 loc2):true)
      (s0_4 (adjacent loc2 loc1):true)
    }
    resource.reusable.capacity:{
        (storage ?r):3
    }
    resource.reusable.usage:{
        
    }
    temporal:{
      (release s0_1 (0 0))
      (release s0_2 (0 0))
      (release s0_3 (0 0))
      (release s0_4 (0 0))             
    }
    goal:{
      (?G1 (object-at o1):loc1)
    }
  }    
)

(#term operators {
      ( name : (move ?r ?l1 ?l2)
        id   : ?ID
        interval : (move ?ID)
        preconditions : {
          ((P1 ?ID) (at ?r):?l1)
          ((P2 ?ID) (adjacent ?l1 ?l2):true)
        }
        effects : {
          ((E1 ?ID) (at ?r):?l2)
        }
        constraints : {
          temporal:
          {
            (duration (move ?ID) [10 10])
            (meets (P1 ?ID) (E1 ?ID))
            (during (move ?ID) (P1 ?ID) (1 +INF) (1 +INF))            
            (during (move ?ID) (P2 ?ID) (1 +INF) (1 +INF))
          }
      })
      ( name : (pick ?r ?o ?l)
        signature : {?r:t_robot ?o:t_object ?l:t_location}
        id   : ?ID
        interval   : (pick ?ID)
        preconditions : {
          ((P1 ?ID) (at ?r):?l)
          ((P2 ?ID) (object-at ?o):?l)
        }
        effects : {
          ((E1 ?ID) (object-at ?o):?r)
        }
        constraints : {
          temporal:
          {
            (duration (pick ?ID) [10 10])
            (meets (P1 ?ID) (E1 ?ID))
            (during (pick ?ID) (P1 ?ID) (1 +INF) (1 +INF))
            ;; (meets (pick ?ID) (E1 ?ID))
          }
          resource.reusable.usage : {
              ((E1 ?ID) (storage ?r) 1)
          }
        })
      ( name : (place ?r ?o ?l)
        signature : {?r:t_robot ?o:t_object ?l:t_location}
        id   : ?ID
        interval    : (place ?ID)
        preconditions : {
          ((P1 ?ID) (at ?r):?l)
          ((P2 ?ID) (object-at ?o):?r)
        }
        effects : {
          ((E1 ?ID) (object-at ?o):?l)
        }
        constraints : {
          temporal:
            {
              (duration (place ?ID) [10 10])
              (meets (P1 ?ID) (E1 ?ID))
              (during (place ?ID) (P1 ?ID) (1 +INF) (1 +INF))
              ;; (meets (place ?ID) (E1 ?ID))
            }
          }
        )
})

