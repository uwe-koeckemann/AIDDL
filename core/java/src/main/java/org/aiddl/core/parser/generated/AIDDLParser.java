/* AIDDLParser.java */
/* Generated By:JavaCC: Do not edit this line. AIDDLParser.java */
package org.aiddl.core.parser.generated;

import java.util.ArrayList;
import java.util.List;

import org.aiddl.core.parser.Parser;
import org.aiddl.core.container.Container;
import org.aiddl.core.container.Entry;
import org.aiddl.core.representation.*;
import org.aiddl.core.function.FunctionRegistry;

@SuppressWarnings("all")
public class AIDDLParser implements AIDDLParserConstants {
  boolean verbose = false;

  public void setVerbose(boolean flag) {
    this.verbose = flag;
  }

  final public Term DomainDefinition(Container db, FunctionRegistry freg) throws ParseException {Term module = null;
  Term modAlias = null;
  Term type = null;
    jj_consume_token(OTUPLE);
    type = SymbolicTerm();
    modAlias = Term(db, freg);
    module = SymbolicTerm();
    jj_consume_token(CTUPLE);
if ( !type.equals(Term.sym("#mod")) ) {
        {if (true) throw new IllegalStateException("First entry in module must use type #mod. Read: (" + type + " " + modAlias + " " + module + ")");}
      }
      Parser.setCurrentModule(module);
      db.addModule(module);
      db.addModuleAlias(module, modAlias, module);
      db.setEntry(module, new Entry(Term.sym("#mod"), modAlias, module));
    label_1:
    while (true) {
Parser.setOpenExpression(true);
      jj_consume_token(OTUPLE);
      Entry(module, db, freg);
      jj_consume_token(CTUPLE);
Parser.setOpenExpression(false);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OTUPLE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
{if ("" != null) return module;}
    throw new Error("Missing return statement in function");
}

  final public void Entry(Term module, Container db, FunctionRegistry freg) throws ParseException {Term type;
  Term name;
  Term content;
  Term compiledModule;
  String fName = null;
    type = Term(db, freg);
    name = Term(db, freg);
    content = Term(db, freg);
if ( type.equals(Term.sym("#req")) ) {
        if ( content instanceof SymbolicTerm ) {
           fName = Parser.getModuleFilename(content);
           if ( fName == null ) {
                {if (true) throw new IllegalStateException("Unknown module: " + content + " (requested by: " + module + ")");}
           }
        } else {
           fName = content.getStringValue().replace("\"","");
        }

        compiledModule = Parser.parseFileInternal(fName, db, freg);
        Parser.setCurrentModule(module);
        db.addModuleAlias(module, name, compiledModule);
    } else if ( type.equals(Term.sym("#nms")) || type.equals(Term.sym("#namespace")) ) {
        if ( content instanceof SymbolicTerm ) {
          fName = Parser.getModuleFilename(content);
          if ( fName == null ) {
            {if (true) throw new IllegalStateException("Unknown module: " + content + " (requested by: " + module + ")");}
          }
        } else if ( content instanceof StringTerm ) {
          fName = content.getStringValue().replace("\"","");
        }
        if ( fName != null ) {
          compiledModule = Parser.parseFileInternal(fName, db, freg);
          Parser.setCurrentModule(module);
          db.addModuleAlias(module, name, compiledModule);
        }
    }
    if ( module != null ) {
        db.setEntry(module, new Entry(type, name, content));
    } else {
        db.setEntry(new Entry(type, name, content));
    }
}

// void Require( Term currentModule, Container db, FunctionRegistry freg ) :
// {
//   Term modName;
//   String fName;
//   Term reqName = null;
//   Term compiledModule;
// }
// {
//   <REQUIRE> reqName = Term(db, freg) modName = Term(db, freg)
//   {

//     if ( modName instanceof SymbolicTerm ) {
//       fName = Parser.getModuleFilename(modName);
//       if ( fName == null ) {

//         throw new IllegalStateException("Unknown module: " + modName + " (requested by: " + currentModule + ")");
//       }      
//     } else {
//       fName = modName.getStringValue().replace("\"","");
//     }

//     compiledModule = Parser.parseFile(fName, db, freg);
//     Parser.setCurrentModule(currentModule);
//     db.addModuleAlias(currentModule, reqName, compiledModule);
//     db.setEntry( currentModule, new Entry( Term.sym("#req"), reqName, modName )); //Term.string(fName) ) );
//   }
// }
// void Namespace( Term currentModule, Container db, FunctionRegistry freg ) :
// {
//   Term modName;
//   String fName;
//   Term reqName = null;
//   Term compiledModule;
// }
// {
//   (<LOADNAMES>|<LOADNMS>) reqName = Term(db, freg) modName = Term(db, freg)
//   {
//   if ( modName instanceof SymbolicTerm ) {
//       fName = Parser.getModuleFilename(modName);
//       if ( fName == null ) {
//         throw new IllegalStateException("Unknown module: " + modName + " (requested by: " + currentModule + ")");
//       }
//     } else {
//       fName = modName.getStringValue().replace("\"","");
//     }  
//     compiledModule = Parser.parseFile(fName,db,freg);
//     Parser.setCurrentModule(currentModule);
//     db.addModuleAlias(currentModule, reqName, compiledModule);
//     db.setEntry( currentModule, new Entry( Term.sym("#namespace"), reqName, modName) );
//   }
// }
  final public 
Term Term(Container db, FunctionRegistry freg) throws ParseException {Term term;
  Term value = null;
  Term resolvedModName = null;
    if (jj_2_2(4)) {
      term = IntegerTerm();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RATIONAL:{
        term = RationalTerm();
        break;
        }
      case SCIREAL:
      case REAL:{
        term = RealTerm();
        break;
        }
      case INF:{
        term = InfTerm();
        break;
        }
      case SYMBOL:{
        term = SymbolicTerm();
        break;
        }
      case VARIABLE:{
        term = VariableTerm();
        break;
        }
      case STRING:{
        term = StringTerm();
        break;
        }
      case SREF:{
        term = SelfReferenceTerm(db, freg);
        break;
        }
      case FREF:{
        term = FunctionReferenceTerm(db, freg);
        break;
        }
      case OTUPLE:
      case OLIST:
      case OSET:
      case ANY:{
        if (jj_2_1(6)) {
          term = TupleTerm(db, freg);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case OLIST:{
            term = ListTerm(db, freg);
            break;
            }
          case OSET:{
            term = SetTerm(db, freg);
            break;
            }
          case ANY:{
            term = AnonymousVariableTerm();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_5(2)) {
      if (jj_2_4(2)) {
        jj_consume_token(ASSOC);
        value = Term(db, freg);
term = Term.keyVal(term, value);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case REF:{
          jj_consume_token(REF);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SYMBOL:{
            value = SymbolicTerm();
            break;
            }
          case VARIABLE:{
            value = VariableTerm();
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
resolvedModName = db.resolveModuleAlias(Parser.getCurrentModule(),value);
          if ( resolvedModName != null ) {
            term = Term.ref(term, value, resolvedModName);
          } else {
            term = Term.ref(term, value);
          }
          if (jj_2_3(2)) {
            jj_consume_token(ASSOC);
            value = Term(db, freg);
term = Term.keyVal(term, value);
          } else {
            ;
          }
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
{
        if ( verbose ) {
           System.out.println(term);
        }
    }
    {if ("" != null) return term;}
    throw new Error("Missing return statement in function");
}

  final public IntegerTerm IntegerTerm() throws ParseException {Token t;
  String s;
  int base = 10;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      t = jj_consume_token(INT);
s = t.image; base = 10;
      break;
      }
    case BIN:{
      t = jj_consume_token(BIN);
s = t.image.split("b")[1]; base = 2;
      break;
      }
    case HEX:{
      t = jj_consume_token(HEX);
s = t.image.split("x")[1]; base = 16;
      break;
      }
    case OCT:{
      t = jj_consume_token(OCT);
s = t.image.split("o")[1]; base = 8;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return Term.integer(Long.parseLong(s, base));}
    throw new Error("Missing return statement in function");
}

  final public Term RationalTerm() throws ParseException {Token t;
    t = jj_consume_token(RATIONAL);
Long p = Long.valueOf(t.image.split("/")[0]);
    Long q = Long.valueOf(t.image.split("/")[1]);
    {if ("" != null) return Term.rational(p,q);}
    throw new Error("Missing return statement in function");
}

  final public Term RealTerm() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case REAL:{
      t = jj_consume_token(REAL);
      break;
      }
    case SCIREAL:{
      t = jj_consume_token(SCIREAL);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return Term.real(Double.valueOf(t.image));}
    throw new Error("Missing return statement in function");
}

  final public Term InfTerm() throws ParseException {Token inf_token;
    inf_token = jj_consume_token(INF);
if ( inf_token.image.startsWith("-") )
      {if ("" != null) return Term.infNeg();}
    else
      {if ("" != null) return Term.infPos();}
    throw new Error("Missing return statement in function");
}

  final public Term SymbolicTerm() throws ParseException {Token t;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return Term.sym(t.image);}
    throw new Error("Missing return statement in function");
}

  final public StringTerm StringTerm() throws ParseException {Token t;
    t = jj_consume_token(STRING);
{if ("" != null) return Term.string(t.image);}
    throw new Error("Missing return statement in function");
}

  final public Term VariableTerm() throws ParseException {Token t;
    t = jj_consume_token(VARIABLE);
if ( Parser.getCurrentModule().getStringValue() == null ) {
      {if ("" != null) return Term.var(t.image);}
    } else {
      {if ("" != null) return Term.var(t.image, Parser.getCurrentModule().getStringValue());}
    }
    throw new Error("Missing return statement in function");
}

  final public Term SelfReferenceTerm(Container db, FunctionRegistry freg) throws ParseException {Term t;
    jj_consume_token(SREF);
    t = Term(db, freg);
Term selfAlias = db.findSelfAlias(Parser.getCurrentModule());
    {if ("" != null) return Term.ref(t, selfAlias, Parser.getCurrentModule());}
    throw new Error("Missing return statement in function");
}

  final public Term FunctionReferenceTerm(Container db, FunctionRegistry freg) throws ParseException {Term t;
    jj_consume_token(FREF);
    t = Term(db, freg);
if ( t instanceof SymbolicTerm ) {
      {if ("" != null) return Term.fref(t.asSym(), freg);}
    } else if ( t instanceof ReferenceTerm ) {
      {if ("" != null) return Term.fref(t.asRef(), freg);}
    }
    {if (true) throw new IllegalArgumentException("Function reference must be symbolic or reference term.\n\t"+t);}
    {if ("" != null) return null;}
    throw new Error("Missing return statement in function");
}

  final public TupleTerm TupleTerm(Container db, FunctionRegistry freg) throws ParseException {Term term;
  List<Term> L;
    jj_consume_token(OTUPLE);
L = new ArrayList<Term>();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OTUPLE:
      case OLIST:
      case OSET:
      case SREF:
      case FREF:
      case ANY:
      case SCIREAL:
      case BIN:
      case HEX:
      case OCT:
      case INT:
      case RATIONAL:
      case REAL:
      case INF:
      case SYMBOL:
      case VARIABLE:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      term = Term(db, freg);
L.add(term);
    }
    jj_consume_token(CTUPLE);
Term[] L_array = new Term[L.size()];
      for ( int i = 0 ; i < L_array.length ; i++ ) {
        L_array[i] = L.get(i);
      }
      {if ("" != null) return Term.tuple(L_array);}
    throw new Error("Missing return statement in function");
}

  final public Term ListTerm(Container db, FunctionRegistry freg) throws ParseException {Term term;
  List<Term> L;
    jj_consume_token(OLIST);
L = new ArrayList<Term>();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OTUPLE:
      case OLIST:
      case OSET:
      case SREF:
      case FREF:
      case ANY:
      case SCIREAL:
      case BIN:
      case HEX:
      case OCT:
      case INT:
      case RATIONAL:
      case REAL:
      case INF:
      case SYMBOL:
      case VARIABLE:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      term = Term(db, freg);
L.add(term);
    }
    jj_consume_token(CLIST);
Term[] L_array = new Term[L.size()];
      for ( int i = 0 ; i < L_array.length ; i++ ) {
        L_array[i] = L.get(i);
      }
      {if ("" != null) return Term.list(L_array);}
    throw new Error("Missing return statement in function");
}

  final public SetTerm SetTerm(Container db, FunctionRegistry freg) throws ParseException {Term term;
  List<Term> L;
    jj_consume_token(OSET);
L = new ArrayList<Term>();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OTUPLE:
      case OLIST:
      case OSET:
      case SREF:
      case FREF:
      case ANY:
      case SCIREAL:
      case BIN:
      case HEX:
      case OCT:
      case INT:
      case RATIONAL:
      case REAL:
      case INF:
      case SYMBOL:
      case VARIABLE:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      term = Term(db, freg);
L.add(term);
    }
    jj_consume_token(CSET);
Term[] L_array = new Term[L.size()];
      for ( int i = 0 ; i < L_array.length ; i++ ) {
        L_array[i] = L.get(i);
      }
      {if ("" != null) return Term.set(L_array);}
    throw new Error("Missing return statement in function");
}

  final public VariableTerm AnonymousVariableTerm() throws ParseException {
    jj_consume_token(ANY);
{if ("" != null) return Term.anonymousVar();}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_VariableTerm_373_3_29()
 {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_Term_272_8_23()
 {
    if (jj_3R_SymbolicTerm_355_3_28()) return true;
    return false;
  }

  private boolean jj_3R_SetTerm_466_3_37()
 {
    if (jj_scan_token(OSET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SetTerm_470_6_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CSET)) return true;
    return false;
  }

  private boolean jj_3R_Term_271_5_8()
 {
    if (jj_scan_token(REF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Term_272_8_23()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_272_33_24()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_StringTerm_364_3_30()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_271_5_8()) return true;
    }
    return false;
  }

  private boolean jj_3R_Term_262_7_35()
 {
    if (jj_3R_AnonymousVariableTerm_488_3_38()) return true;
    return false;
  }

  private boolean jj_3R_Term_260_7_34()
 {
    if (jj_3R_SetTerm_466_3_37()) return true;
    return false;
  }

  private boolean jj_3R_Term_258_7_33()
 {
    if (jj_3R_ListTerm_442_3_36()) return true;
    return false;
  }

  private boolean jj_3R_SymbolicTerm_355_3_28()
 {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_ListTerm_446_6_39()
 {
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_TupleTerm_418_3_5()) return true;
    return false;
  }

  private boolean jj_3R_Term_253_5_21()
 {
    if (jj_3R_FunctionReferenceTerm_400_3_32()) return true;
    return false;
  }

  private boolean jj_3R_Term_255_3_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_258_7_33()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_260_7_34()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_262_7_35()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Term_251_5_20()
 {
    if (jj_3R_SelfReferenceTerm_388_3_31()) return true;
    return false;
  }

  private boolean jj_3R_ListTerm_442_3_36()
 {
    if (jj_scan_token(OLIST)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ListTerm_446_6_39()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLIST)) return true;
    return false;
  }

  private boolean jj_3R_Term_249_5_19()
 {
    if (jj_3R_StringTerm_364_3_30()) return true;
    return false;
  }

  private boolean jj_3R_Term_247_5_18()
 {
    if (jj_3R_VariableTerm_373_3_29()) return true;
    return false;
  }

  private boolean jj_3R_Term_245_5_17()
 {
    if (jj_3R_SymbolicTerm_355_3_28()) return true;
    return false;
  }

  private boolean jj_3R_InfTerm_341_3_27()
 {
    if (jj_scan_token(INF)) return true;
    return false;
  }

  private boolean jj_3R_Term_243_5_16()
 {
    if (jj_3R_InfTerm_341_3_27()) return true;
    return false;
  }

  private boolean jj_3R_Term_241_5_15()
 {
    if (jj_3R_RealTerm_332_3_26()) return true;
    return false;
  }

  private boolean jj_3R_Term_239_4_14()
 {
    if (jj_3R_RationalTerm_320_3_25()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_IntegerTerm_306_3_6()) return true;
    return false;
  }

  private boolean jj_3R_RealTerm_332_3_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  private boolean jj_3R_Term_236_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_239_4_14()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_241_5_15()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_243_5_16()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_245_5_17()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_247_5_18()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_249_5_19()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_251_5_20()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_253_5_21()) {
    jj_scanpos = xsp;
    if (jj_3R_Term_255_3_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TupleTerm_422_6_9()
 {
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  private boolean jj_3R_TupleTerm_418_3_5()
 {
    if (jj_scan_token(OTUPLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_TupleTerm_422_6_9()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CTUPLE)) return true;
    return false;
  }

  private boolean jj_3R_RationalTerm_320_3_25()
 {
    if (jj_scan_token(RATIONAL)) return true;
    return false;
  }

  private boolean jj_3R_IntegerTerm_310_5_13()
 {
    if (jj_scan_token(OCT)) return true;
    return false;
  }

  private boolean jj_3R_IntegerTerm_309_5_12()
 {
    if (jj_scan_token(HEX)) return true;
    return false;
  }

  private boolean jj_3R_IntegerTerm_308_5_11()
 {
    if (jj_scan_token(BIN)) return true;
    return false;
  }

  private boolean jj_3R_IntegerTerm_307_5_10()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_IntegerTerm_306_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IntegerTerm_307_5_10()) {
    jj_scanpos = xsp;
    if (jj_3R_IntegerTerm_308_5_11()) {
    jj_scanpos = xsp;
    if (jj_3R_IntegerTerm_309_5_12()) {
    jj_scanpos = xsp;
    if (jj_3R_IntegerTerm_310_5_13()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_FunctionReferenceTerm_400_3_32()
 {
    if (jj_scan_token(FREF)) return true;
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  private boolean jj_3R_Term_272_33_24()
 {
    if (jj_3R_VariableTerm_373_3_29()) return true;
    return false;
  }

  private boolean jj_3R_AnonymousVariableTerm_488_3_38()
 {
    if (jj_scan_token(ANY)) return true;
    return false;
  }

  private boolean jj_3R_SelfReferenceTerm_388_3_31()
 {
    if (jj_scan_token(SREF)) return true;
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(ASSOC)) return true;
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  private boolean jj_3R_SetTerm_470_6_40()
 {
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(ASSOC)) return true;
    if (jj_3R_Term_236_3_7()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AIDDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80,0x40a00,0x3f0cca80,0x18000000,0x2000,0xf00000,0x2080000,0x3ffcca80,0x3ffcca80,0x3ffcca80,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AIDDLParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AIDDLParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AIDDLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AIDDLParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AIDDLParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AIDDLParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AIDDLParser(AIDDLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AIDDLParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 10; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[30];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 10; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 30; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 5; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
